<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="tag_processor" script:language="StarBasic">


option explicit
option compatible



function gen_desc_tags_for_item%

dim frc%

frc=msgbox("Do you want to generate Item Tags from Descriptions?",4+32+256,"Verify Action")
if frc<>6 then exit function   'Must press YES

' on error goto _error <<<

dim _ixerr%,_errxmsg$(10),_errbmsg$,_errbtit$,_errbflg%,_errid%
_errbtit="Shopify Tag Gen Fail" 
_errbflg=pub_msgbox_flag_stop_icon

dim cells as object,sheet as object,doc as object

dim rows_product_selector(),row_product_selector$()

Dim Filename$,FileNo%
 
Filename = "C:\Users\IBM_ADMIN\Desktop\Jewelry\MMA_International\desctags-for-item-Nov17_2016.txt"     ' Tags written here
 
dim xr%,candidateTagIndex%,i%,j%,byte$,ffound as boolean
dim aDescTags$(1000),tag$,desc$,itemNum$,ss$()

dim tag_delims$ 	: tag_delims$="`~!@#$%^&*()_-+={[}]|\:;""'<,>.?/ "
dim skip_word$() 

skip_word=array("in","it","with","on","off","over","mm","inch","inches","clasp",_
"wide","made","features","of","and","or","measures","around","can","be","combined",_
"our","other","size","shape","the","may","design","top","split","vary","nice","good",_
"has","closure","this","beautiful","gives","extra","brilliance","lots","artistically",_
"along","top","portion","surrounded","center","inner","outer","around","other",_
"zero","one","two","three","four","five","six","seven","eight","nine","ten",_
"graduates","shank","length","diameter","is","to","will","comes","are","czs","designs","for","as",_
"feature","graduated","from","measure","width","wide","short","long","small","large","medium","separated","by",_ 
"perfect","very","alternating","approx","approximately","tag","accommodates","accommodate","an",_
"closefivedollar","closeall","closeb","woscc","closen","bv","or","view","er",_
"ss","ex","trbjothr","other","view all","style","all","ringsize...","woscsn",_
"webearrings","webbracelets","webnecklaces","woscr","closeps","closeunder25","ringall",_
"view","2","elementsofcharm","brall","watchesall","closew","closetendollar","neck",_
"theme","back","sneakpreview","finding","webother","jewelry","close","mjn","ringall",_
"closee","closeall","closefivedollar","filled","closeundertwentyfive","wosch","mjb",_
"closeovertwentyfive","webrings","closer","closeb","2","closeo","closeps","woscf",_
"adjustable","adjusts","a","x","ends","its","embellished","contains","hollow","each","both","removeable",_
"used","use","item","order","replacement","full","you","says","back","tiny","these","backs","worn","most",_
"ends","bonus","image","shown","sold","separately","pave","20â€?","24â€?","front","back","either","side",_
"fashion","base","metal",_
"bottom","area","include","includes","contains","have","total","functioning","out","open","stock","currently",_
"new","arrivals","mjo","designs","glamour","mjr","aa","aaa","woscm","mjn","watchesall","webpendants")

doc				=thiscomponent
sheet			=doc.sheets.getbyname(pub_sheet_product_selector)


' tag(tagIndex)=".925" : tagIndex=1   ' Special case


FileNo = FreeFile               ' Establish free file handle
 
Open Filename For Output As #FileNo    


do 	' for each row in product selector sheet (skip header)

    xr=1+xr
    
	cells = sheet.getCellRangeByposition(0,xr,pub_column_max,xr)
	rows_product_selector() = cells.getdataarray()
	row_product_selector=rows_product_selector(0)   ' 1 row of product_selector cells
	
	desc		=	lcase(row_product_selector(pub_column_product_selector_desc))
	itemNum		=	row_product_selector(pub_column_product_selector_item_num)
	
	if itemNum	<>	"" then 	
		
		candidateTagIndex=0
		
		for i=1 to len(desc) : byte=mid(desc,i,1)
			ffound=false
		    for j=1 to len(tag_delims)
		        if byte=mid(tag_delims,j,1) then
		        	ffound=true  ' delimited byte
		        	exit for
		        end if
		    next j		
		    if not ffound then 
		    	aDescTags(candidateTagIndex)=aDescTags(candidateTagIndex) & byte
			else candidateTagIndex=1+candidateTagIndex  ' Candidate tag complete, next slot
			end if
		next i
		
		for i=0 to candidateTagIndex	' Filter candidate tags
	
			if aDescTags(i)="" then goto next_i
			
			for j=0 to ubound(skip_word)	' Skip tags listed in skip array
				if aDescTags(i)=skip_word(j) then 
					aDescTags(i)=""
				    goto next_i
				end if
			next j
			
			if isnumeric(aDescTags(i)) then
				aDescTags(i)=""
				goto next_i
			end if 
			
			if len(aDescTags(i))>2 and right(aDescTags(i),2)="mm" then
					aDescTags(i)=""
			end if	 	
				
			' <<< delete ##x## <<<
	
	next_i:
		next i
		
		
			
		for i=0 to candidateTagIndex	' Eliminate duplicate tags
			for j=0 to candidateTagIndex
				if i<>j and aDescTags(i)=aDescTags(j) then aDescTags(i)=""
			next j
		next i
		
		tag = ""
		
		for i=0 to candidateTagIndex	' glue tags together with comma delimiters
			if aDescTags(i)<>"" then
				tag = tag & aDescTags(i) & ","
				aDescTags(i)="" 
	 		end if 
		next i
		
		tag = left(tag,len(tag)-1)  ' lose the trailing comma
		
	
	 	Print #FileNo, itemNum & " " & tag
 	
 	end if	' itemNum<>""

loop until itemNum="" or xr=pub_row_max		' loop row sheet product selector

Close #FileNo ' Close file

goto _exitfunc

tag_error:
_errbmsg="Error " & _errid & ": "
for _ixerr=0 to ubound(_errxmsg)
    if _errxmsg(_ixerr)="" then exit for
    _errbmsg=_errbmsg & _errxmsg(_ixerr) & chr$(13) & chr$(13)
next _ixerr	 
frc=msgbox(_errbmsg,_errbflg,_errbtit)
gen_desc_tags=_errid
goto _exitfunc

' _error:
' gen_desc_tags=err()

_exitfunc:
end function
























option explicit
option compatible


function gen_desc_tags%

dim frc%

frc=msgbox("Do you want to generate Tags from Descriptions?",4+32+256,"Verify Action")
if frc<>6 then exit function   'Must press YES

' on error goto _error <<<

dim _ixerr%,_errxmsg$(10),_errbmsg$,_errbtit$,_errbflg%,_errid%
_errbtit="Shopify Tag Gen Fail" 
_errbflg=pub_msgbox_flag_stop_icon

dim cells as object,sheet as object,doc as object

dim rows_product_selector(),row_product_selector$()

Dim Filename$,FileNo%
 
Filename = "C:\Users\IBM_ADMIN\Desktop\Jewelry\MMA_International\desctags.txt"     ' Tags written here
 
dim xr%,candidateTagIndex%,i%,j%,byte$,ffound as boolean
dim aDescTags$(1000),tag$(10000),tagIndex%,desc$,ss$()

dim tag_delims$ 	: tag_delims$="`~!@#$%^&*()_-+={[}]|\:;""'<,>.?/ "
dim skip_word$() 

skip_word=array("in","it","with","on","off","over","mm","inch","inches","clasp",_
"wide","made","features","of","and","or","measures","around","can","be","combined",_
"our","other","size","shape","the","may","design","top","split","vary","nice","good",_
"has","closure","this","beautiful","gives","extra","brilliance","lots","artistically",_
"along","top","portion","surrounded","center","inner","outer","around","other",_
"zero","one","two","three","four","five","six","seven","eight","nine","ten",_
"graduates","shank","length","diameter","is","to","will","comes","are","czs","designs","for","as",_
"feature","graduated","from","measure","width","wide","short","long","small","large","medium","separated","by",_ 
"perfect","very","alternating","approx","approximately","tag","accommodates","accommodate","an",_
"closefivedollar","closeall","closeb","woscc","closen","bv","or","view","er",_
"ss","ex","trbjothr","other","view all","style","all","ringsize...","woscsn",_
"webearrings","webbracelets","webnecklaces","woscr","closeps","closeunder25","ringall",_
"view","2","elementsofcharm","brall","watchesall","closew","closetendollar","neck",_
"theme","back","sneakpreview","finding","webother","jewelry","close","mjn","ringall",_
"closee","closeall","closefivedollar","filled","closeundertwentyfive","wosch","mjb",_
"closeovertwentyfive","webrings","closer","closeb","2","closeo","closeps","woscf",_
"adjustable","adjusts","a","x","ends","its","embellished","contains","hollow","each","both","removeable",_
"used","use","item","order","replacement","full","you","says","back","tiny","these","backs","worn","most",_
"ends","bonus","image","shown","sold","separately","pave","20â€?","24â€?","front","back","either","side",_
"fashion","base","metal",_
"bottom","area","include","includes","contains","have","total","functioning","out","open","stock","currently",_
"new","arrivals","mjo","designs","glamour","mjr","aa","aaa","woscm","mjn","watchesall","webpendants")

doc				=thiscomponent
sheet			=doc.sheets.getbyname(pub_sheet_product_selector)

	tag(tagIndex)=".925" : tagIndex=1   ' Special case

do 	' for each row in product selector sheet (skip header)
    xr=1+xr
	cells = sheet.getCellRangeByposition(0,xr,pub_column_max,xr)
	rows_product_selector() = cells.getdataarray()
	row_product_selector=rows_product_selector(0)   ' 1 row of product_selector cells
	desc=lcase(row_product_selector(pub_column_product_selector_desc))
	
	candidateTagIndex=0
	
	for i=1 to len(desc) : byte=mid(desc,i,1)
		ffound=false
	    for j=1 to len(tag_delims)
	        if byte=mid(tag_delims,j,1) then
	        	ffound=true  ' delimited byte
	        	exit for
	        end if
	    next j		
	    if not ffound then 
	    	aDescTags(candidateTagIndex)=aDescTags(candidateTagIndex) & byte
		else candidateTagIndex=1+candidateTagIndex  ' Candidate tag complete, next slot
		end if
	next i
	
	for i=0 to candidateTagIndex	' Filter candidate tags
		if aDescTags(i)<>""				and _
		   not isnumeric(aDescTags(i))	and _
		   len(aDescTags(i))>2	 	   	then
		    if right(aDescTags(i),2)="mm" then
				aDescTags(i)=""
				goto next_i
			end if	 
		  	for j=0 to tagIndex		' Eliminate duplicate tags
				if aDescTags(i)=tag(j)	then
					aDescTags(i)=""
				    goto next_i
				end if
			next j
			for j=0 to ubound(skip_word)	' Eliminate undesired tags
				if aDescTags(i)=skip_word(j) then
					aDescTags(i)=""
				    goto next_i
				end if
			next j
			' <<< delete ##x## <<<
		else aDescTags(i)=""	
		end if
next_i:
	next i
	
	for i=0 to candidateTagIndex
		if aDescTags(i)<>"" then
			tag(tagIndex)=aDescTags(i)
			tagIndex=1+tagIndex
			aDescTags(i)="" 
 		end if 
	next i

loop until desc="" or xr=pub_row_max  						' loop row sheet product selector

FileNo = FreeFile               ' Establish free file handle
 
Open Filename For Output As #FileNo       

for i=0 to tagIndex
  Print #FileNo, tag(i) 
next i

Close #FileNo                  ' Close file

goto _exitfunc


tag_error:
_errbmsg="Error " & _errid & ": "
for _ixerr=0 to ubound(_errxmsg)
    if _errxmsg(_ixerr)="" then exit for
    _errbmsg=_errbmsg & _errxmsg(_ixerr) & chr$(13) & chr$(13)
next _ixerr	 
frc=msgbox(_errbmsg,_errbflg,_errbtit)
gen_desc_tags=_errid
goto _exitfunc

' _error:
' gen_desc_tags=err()

_exitfunc:
end function









function insert_desc_tags%()


' for each row in tags
'   find all occurrences of tag in product selector desc column
'   if found, add tag to product selector tag column - insert with comma as needed
'   if not found, error message (bad tag)
'
' changes:
' see cols 2 and 3 
' 

dim frc%

frc=msgbox("Do you want to insert Tags from Descriptions?",4+32+256,"Verify Action")
if frc<>6 then exit function   'Must press YES

' on error goto _error <<<

dim _ixerr%,_errxmsg$(10),_errbmsg$,_errbtit$,_errbflg%,_errid%
_errbtit="Shopify Tag Insert Fail" 
_errbflg=pub_msgbox_flag_stop_icon



dim xr%,i%,r%,j%,drow as long,doc as object
dim work_tags$,tag$,new_tags$,curr_tags$
dim titem_num$,desc$,ss$(),comma$,item_num$
dim rch as object,resu as object,sheet as object,cells as object
dim sheet_tag as object
dim rows_tag(),row_tag()
dim opts as new com.sun.star.util.SearchOptions

doc=thiscomponent
            
rch = createunoservice("com.sun.star.util.TextSearch")

with opts
  .algorithmType = com.sun.star.util.SearchAlgorithms.REGEXP
  .searchFlag = com.sun.star.util.SearchFlags.REG_EXTENDED
end with

sheet=doc.sheets.getbyname(pub_sheet_product_selector)
sheet_tag=doc.sheets.getbyname(pub_sheet_desctags)

drow=0  'skip header 

do  ' for each row in product descriptor sheet
	drow=1+drow
  	desc=lcase(sheet.getcellbyposition(pub_column_product_selector_desc,drow).string)
  	item_num=sheet.getcellbyposition(pub_column_product_selector_item_num,drow).string
  	xr=0  
	do 	' for each row in tag sheet
	    xr=1+xr	' skip header
		cells = sheet_tag.getCellRangeByposition(0,xr,pub_column_max,xr)
		rows_tag() = cells.getdataarray()
		row_tag=rows_tag(0)   ' 1 row of tag cells
		tag=lcase(row_tag(pub_column_desctags_tag))
		new_tags=tag & "," & lcase(row_tag(pub_column_desctags_more_tags))
	  
	    opts.searchString = "\b" & tag & "\b"
	 	rch.setOptions(opts)
		resu=rch.searchForward(desc,0,len(desc)-1)
		r=resu.subRegExpressions
	
		if r>0 then ' the regexp was matched -- desc contains tag
			curr_tags=sheet.getcellbyposition(pub_column_product_selector_tags,drow).string
			work_tags=lcase(curr_tags & "," & new_tags) 
			ss()=split(work_tags,",")
			for i=0 to ubound(ss)
				for j=1+i to ubound(ss)
					if ss(i)=ss(j) then ss(j)=""
				next j
			next i
			work_tags="" : comma=""
			for i=0 to ubound(ss)
				if ss(i)<>"" then 
					work_tags=work_tags & comma & ss(i)
					comma=","
				end if
			next i	
			if work_tags<>curr_tags then sheet.getcellbyposition(pub_column_product_selector_tags,drow).string=work_tags
		end if 
		
	loop until tag="" or xr>pub_row_max
	
  	titem_num=sheet.getcellbyposition(pub_column_product_selector_item_num,drow).string
  	
loop until titem_num="" or drow>pub_row_max

end function










function insert_file_tags%()


' for each line in tags file
'	find item number in product selector sheet (loaded to array for "speed")
'   	if found, add new tags and sanitize all tags for item
'		at EOF, commit array back to sheet (see fcommit_to_sheet flag)
'	This runs for about 15 minutes.
'	May 2016, pb

dim frc%

frc=msgbox("Do you want to insert Tags from Tag File?",4+32+256,"Verify Action")
if frc<>6 then exit function   'Must press YES

dim _ixerr%,_errxmsg$(10),_errbmsg$,_errbtit$,_errbflg%,_errid%
_errbtit="Shopify Tag Insert Fail" 
_errbflg=pub_msgbox_flag_stop_icon


dim fcommit_to_sheet as boolean : fcommit_to_sheet=true

dim xr%,i%,r%,j%,xx%,tagIndex as long,xd as long,drow as long,filein1%,doc as object
dim work_tags$,tag$,new_tags$,curr_tags$,fitem_num$,recno as long
dim titem_num$,desc$,ss$(),comma$,item_num$
dim rch as object,resu as object,sheet as object,cells as object
dim sheet_tag as object,ffound as boolean
dim rows_product_selector(),r_prowoduct_selector()
dim opts as new com.sun.star.util.SearchOptions
dim homedir$,jeweldir$,txodir$,tag_file$,fbyte$,tt1 as variant,tt2 as variant

homedir			="C:\Users\IBM_ADMIN\Desktop"								' Home directory
jeweldir		=homedir  & "\Jewelry"										' Jewelry directory
txodir			=jeweldir & "\@TEST\Tags\"									' Taxonomy directory	 
tag_file		=txodir & "mma_tags_abbrev.txt"   							' Input Tag File

doc=thiscomponent
            
rch = createunoservice("com.sun.star.util.TextSearch")

with opts
  .algorithmType = com.sun.star.util.SearchAlgorithms.REGEXP
  .searchFlag = com.sun.star.util.SearchFlags.REG_EXTENDED
end with

' Load Product Descriptor into array for faster updates.
sheet=doc.sheets.getbyname(pub_sheet_product_selector)

drow=pub_sheet_product_selector_min_rows-1  'min row count -1

do  ' count rows with data
	drow=1+drow
loop until ""=sheet.getcellbyposition(pub_column_product_selector_item_num,drow).string
drow=drow-1	' Data row count 

cells = sheet.getCellRangeByposition(0,1,pub_column_max,drow)
rows_product_selector() = cells.getdataarray()

filein1=freefile
open tag_file for input as #filein1

recno=0

line input #filein1 work_tags

while not eof(filein1)  ' for each line in Tag File

	recno=1+recno					' Progress indicator

	fitem_num=""
	
	for i=1 to len(work_tags)		' MMA item num is first blank delimited word.
		fbyte=mid(work_tags,i,1) 	' Remaining comma-delimited words are tags.
		if fbyte=" " then exit for 	' normally followed by a trailing comma that is ignored.
		fitem_num=fitem_num & fbyte '	 iiiiiii tag1,tag2,tag3,    <==== format
	next i
	
	if right(work_tags,1)="," then 
		xx=1
	else 
		xx=0
	end if
	 
	work_tags=lcase(mid(work_tags,i+1,len(work_tags)-(i+xx)))  	' lose 1st word (MMA item num) & probable trailing comma
							
' Lookup the Product Descriptor row by MMA Item Number.
' If not found, skip.  
' If found, insert & sanitize all tags.

	ffound=false
	for xd=0 to drow-1
	
		row_product_selector=rows_product_selector(xd)
		' <<< tt1=row_product_selector(pub_column_product_selector_tags)   ' <<<
		
		if lcase(row_product_selector(pub_column_product_selector_item_num))=lcase(fitem_num) then  ' item found
			curr_tags=row_product_selector(pub_column_product_selector_tags)
			work_tags=lcase(curr_tags & "," & work_tags)
			ss()=split(work_tags,",")
			for i=0 to ubound(ss)	' Remove duplicates and plurals in work array
				for j=1+i to ubound(ss)
					if ss(i)=ss(j) then 
						ss(j)=""
					elseif ss(i) & "s" = ss(j) then ss(j)=""  
					elseif ss(j) & "s" = ss(i) then ss(i)=""
					end if
				next j
			next i
			work_tags="" : comma=""
			for i=0 to ubound(ss)	' Rebuild from work array without baddies
				if ss(i)<>"" then 
					work_tags=work_tags & comma & ss(i)
					comma=","
				end if
			next i	
			
			if work_tags<>curr_tags then	' Put changes in sheet array
				row_product_selector(pub_column_product_selector_tags)=work_tags
			end if 
	  			
			ffound=true

			' <<< tt2=row_product_selector(pub_column_product_selector_tags) <<<
			exit for	
		end if
	next
	if 0 & ffound=false then 	'NO FAIL: Item number not found is ok for now
		_errid=1100
		_errxmsg(0)="Tag file item number " & fitem_num & " not found in " & pub_sheet_product_selector & " sheet"
		_errxmsg(1)="Tag file is " & tag_file
		_errxmsg(2)="All sheet changes are discarded"
		goto tag_error		
	end if
	
	line input #filein1 work_tags
	
wend	' next Tag file line 

if fcommit_to_sheet=true then
	' Commit the array back to the sheet
	cells.setdataarray(rows_product_selector())
end if

goto _exitfunc


tag_error:
' _errbmsg="Error " & _errid & ": "
' for _ixerr=0 to ubound(_errxmsg)
'     if _errxmsg(_ixerr)="" then exit for
'     _errbmsg=_errbmsg & _errxmsg(_ixerr) & chr$(13) & chr$(13)
' next _ixerr	 
' frc=msgbox(_errbmsg,_errbflg,_errbtit)
' insert_file_tags=_errid


_exitfunc:
close #filein1 ' Close file

end function


			



</script:module>
